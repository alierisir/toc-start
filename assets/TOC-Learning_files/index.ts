import * as THREE from "/node_modules/.vite/deps/three.js?v=ce537bd3";
import * as OBC from "/node_modules/.vite/deps/openbim-components.js?v=ce537bd3";
import { ProjectsManager } from "/src/classes/ProjectsManager.ts";
import { ErrorManager } from "/src/classes/ErrorManager.ts";
import { editDummy } from "/src/classes/CustomFunctions.ts";
const pageIds = ["projects-page", "users-page", "project-details"];
const projectPageBtn = document.getElementById("nav-project");
const userPageBtn = document.getElementById("nav-user");
function openPage(id) {
  const pageId = pageIds.filter((elem) => elem === id)[0];
  const inactivePagesIds = pageIds.filter((elem) => elem !== id);
  inactivePagesIds.map((id2) => {
    const inactivePage = document.getElementById(id2);
    inactivePage ? inactivePage.style.display = "none" : console.log("Inactive page is not found!");
  });
  const page = document.getElementById(pageId);
  page ? page.style.display = "flex" : console.warn("Check page id: ", id);
}
if (projectPageBtn && userPageBtn) {
  projectPageBtn.addEventListener("click", () => {
    openPage("projects-page");
  });
  userPageBtn.addEventListener("click", () => {
    openPage("users-page");
  });
} else {
  console.warn("Navigation button is not found!");
}
const errContainer = document.getElementById("err-dialog");
const errManager = new ErrorManager(errContainer);
function toggleModal(id) {
  const modal = document.getElementById(id);
  if (modal && modal instanceof HTMLDialogElement) {
    if (modal.open)
      modal.close();
    else
      modal.showModal();
  } else
    console.warn("Element id is not found!", id);
}
const newProjectBtn = document.getElementById("new-project-btn");
const newUserBtn = document.getElementById("new-user-btn");
if (newProjectBtn) {
  newProjectBtn.addEventListener("click", () => {
    toggleModal("new-project-modal");
  });
} else
  console.log("Button cannot be found, check html ids!");
if (newUserBtn) {
  newUserBtn.addEventListener("click", () => {
    toggleModal("new-user-modal");
  });
} else
  console.log("Button cannot be found, check the ID!");
const projectsListUi = document.getElementById("projects-list");
const projectDetailsPage = document.getElementById(
  "project-details"
);
const projectsManager = new ProjectsManager(projectsListUi, projectDetailsPage);
const projectForm = document.getElementById("new-project-form");
const formCancel = document.getElementById("form-cancel");
if (projectForm && projectForm instanceof HTMLFormElement && formCancel && formCancel instanceof HTMLButtonElement) {
  formCancel.addEventListener("click", () => {
    projectForm.reset();
    toggleModal("new-project-modal");
  });
  projectForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const formData = new FormData(projectForm);
    const projectData = {
      name: formData.get("name"),
      description: formData.get("description"),
      status: formData.get("status"),
      role: formData.get("role"),
      date: new Date(formData.get("date"))
    };
    try {
      projectsManager.newProject(projectData);
      projectForm.reset();
      toggleModal("new-project-modal");
    } catch (e2) {
      const errDef = {
        code: "001",
        text: `A project with the name"${projectData.name}" already exists.`,
        header: "Input Error"
      };
      errManager.newError(errDef);
    }
  });
} else {
  console.warn("Form is not found or it is not an HTMLForm, check the ID");
}
const importBtn = document.getElementById("import-from-json");
const exportBtn = document.getElementById("export-to-json");
if (importBtn && importBtn instanceof HTMLButtonElement && exportBtn && exportBtn instanceof HTMLButtonElement) {
  exportBtn.addEventListener("click", () => {
    projectsManager.exportToJSON();
  });
  importBtn.addEventListener("click", () => {
    projectsManager.importFromJSON();
  });
} else {
  console.warn("Buttons are not found. Check export and import button ids!");
}
const todoModal = document.getElementById("new-todo-modal");
console.log("modal", todoModal);
const todoForm = document.getElementById("new-todo-form");
console.log("form", todoForm);
const todoCancel = document.getElementById("todo-cancel");
console.log("cancelbtn", todoCancel);
const addTodoBtn = projectDetailsPage.querySelector(`[todo-add]`);
console.log("addTodobtn", addTodoBtn);
const todoContainer = projectDetailsPage.querySelector(`[todo-list-container]`);
if (todoModal && todoModal instanceof HTMLDialogElement && todoForm && todoForm instanceof HTMLFormElement && todoCancel && todoCancel instanceof HTMLButtonElement && addTodoBtn && addTodoBtn instanceof HTMLElement && todoContainer && todoContainer instanceof HTMLElement) {
  addTodoBtn.addEventListener("click", () => {
    todoModal.showModal();
  });
  todoCancel.addEventListener("click", () => {
    todoForm.reset();
    todoModal.close();
  });
  todoForm.addEventListener("submit", (e) => {
    e.preventDefault();
    const formData = new FormData(todoForm);
    const dateInput = document.getElementById("todo-deadline");
    console.log("Date input element:", dateInput);
    const iTodo = {
      task: formData.get("todo-task"),
      status: formData.get("todo-status"),
      deadline: new Date(formData.get("todo-deadline"))
    };
    projectsManager.activeProject.newToDo(iTodo);
    projectsManager.updateToDoList();
    todoForm.reset();
    todoModal.close();
  });
}
const editFormBtn = document.getElementById("p-edit");
const editForm = document.getElementById(
  "edit-project-form"
);
const editFormCancel = document.getElementById(
  "edit-form-cancel"
);
editFormBtn.addEventListener("click", () => {
  toggleModal("edit-project-modal");
  for (const key in editDummy) {
    const value = projectsManager.activeProject[key];
    const element = editForm.querySelector(
      `[name="edit-${key}"]`
    );
    element.placeholder = value;
    if (key === "progress")
      element.placeholder += "%";
    if (key === "cost")
      element.placeholder = `$${value}`;
    if (key === "status" || key === "role")
      element.value = value;
    if (key === "date")
      element.valueAsDate = new Date(value);
  }
});
editFormCancel.addEventListener("click", () => {
  toggleModal("edit-project-modal");
  editForm.reset();
});
editForm.addEventListener("submit", (e) => {
  e.preventDefault();
  const formData = new FormData(editForm);
  const editedData = {
    name: formData.get("edit-name"),
    description: formData.get("edit-description"),
    status: formData.get("edit-status"),
    role: formData.get("edit-role"),
    cost: Number(formData.get("edit-cost")),
    progress: Number(formData.get("edit-progress")),
    date: new Date(formData.get("edit-date"))
  };
  const nameIsAvailable = !projectsManager.checkEditNameInUse(editedData);
  if (nameIsAvailable) {
    projectsManager.activeProject.editProject(editedData);
    projectsManager.setPageDetails();
    toggleModal("edit-project-modal");
    editForm.reset();
  } else {
    console.warn("There is another project with the same name!");
    editForm.reset();
  }
});
window.addEventListener("keydown", (e) => {
  if (e.key === "a" || e.key === "A")
    console.log(
      projectsManager.activeProject.id,
      projectsManager.activeProject.name
    );
});
const viewer = new OBC.Components();
const sceneComponent = new OBC.SimpleScene(viewer);
viewer.scene = sceneComponent;
const scene = sceneComponent.get();
sceneComponent.setup();
scene.background = null;
const viewerContainer = document.getElementById(
  "viewer-container"
);
const rendererComponent = new OBC.PostproductionRenderer(
  viewer,
  viewerContainer
);
viewer.renderer = rendererComponent;
const cameraComponent = new OBC.OrthoPerspectiveCamera(viewer);
viewer.camera = cameraComponent;
const raycasterComponent = new OBC.SimpleRaycaster(viewer);
viewer.raycaster = raycasterComponent;
const grid = new THREE.GridHelper(100, 100);
grid.material.transparent = true;
grid.material.opacity = 0.4;
grid.material.color = new THREE.Color("#00ffff");
scene.add(grid);
viewer.init();
cameraComponent.updateAspect();
rendererComponent.postproduction.enabled = true;
const classifier = new OBC.FragmentClassifier(viewer);
const classifierWindow = new OBC.FloatingWindow(viewer);
viewer.ui.add(classifierWindow);
classifierWindow.title = "Model Groups";
classifierWindow.domElement.style.background = "black";
classifierWindow.domElement.style.opacity = "0.8";
classifierWindow.domElement.style.background = "blur(100px)";
classifierWindow.domElement.style.color = "#a2ff42";
let fragments = new OBC.FragmentManager(viewer);
let fragmentIfcLoader = new OBC.FragmentIfcLoader(viewer);
fragmentIfcLoader.settings.wasm = {
  path: "https://unpkg.com/web-ifc@0.0.43/",
  absolute: true
};
fragmentIfcLoader.onIfcLoaded.add(async (model) => {
  console.clear();
  fragmentHighlighter.update();
  classifier.byEntity(model);
  classifier.byStorey(model);
  console.log(classifier.get());
  const fragmentTree = new OBC.FragmentTree(viewer);
  await fragmentTree.init();
  await fragmentTree.update(["entities", "storeys"]);
  const tree = fragmentTree.get().uiElement.get("tree");
  tree.name = model.name;
  await classifierWindow.slots.content.dispose(true);
  classifierWindow.addChild(tree);
});
const fragmentHighlighter = new OBC.FragmentHighlighter(viewer);
fragmentHighlighter.setup();
const mainToolBar = new OBC.Toolbar(viewer);
viewer.ui.addToolbar(mainToolBar);
mainToolBar.addChild(fragmentIfcLoader.uiElement.get("main"));

//# sourceMappingURL=data:application/json;base64,